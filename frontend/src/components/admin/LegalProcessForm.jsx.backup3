import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { Button } from '../ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Badge } from '../ui/badge';
import { 
  Save, 
  X, 
  Plus, 
  Trash2, 
  ArrowLeft,
  AlertCircle,
  CheckCircle,
  Edit
} from 'lucide-react';
import { API_CONFIG } from '../../config';

const LegalProcessForm = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const isEditing = !!id;

  const [loading, setLoading] = useState(isEditing); // Edit modda loading true başlasın
  const [process, setProcess] = useState({
    title: '',
    description: '',
    icon: '⚖️',
    color: '#3B82F6',
    gradient: 'from-blue-500 to-blue-600',
    duration: '',
    difficulty: 'Orta',
    total_steps: 0,
    has_calculator: false,
    calculator_type: '', // 'compensation' or 'execution'
    category: 'hukuk',
    tags: [],
    estimated_costs: {
      title: '',
      items: [],
      total_range: '',
      free_options: []
    },
    steps: []
  });

  const [newTag, setNewTag] = useState('');
  const [newCostItem, setNewCostItem] = useState({
    name: '',
    min: '',
    max: '',
    note: ''
  });
  const [newFreeOption, setNewFreeOption] = useState('');
  const [newStep, setNewStep] = useState({
    id: '',
    title: '',
    short_title: '',
    description: '',
    duration: '',
    participants: [],
    required_documents: [],
    important_notes: [],
    position: { x: 0, y: 0 },
    connections: [],
    status: 'upcoming'
  });

  // New states for managing step details
  const [newParticipant, setNewParticipant] = useState('');
  const [newDocument, setNewDocument] = useState('');
  const [newDocumentDescription, setNewDocumentDescription] = useState('');
  const [newImportantNote, setNewImportantNote] = useState('');

  // Sample data loader
  const loadSampleData = () => {
    const sampleProcess = {
      title: 'Boşanma Süreci',
      description: 'Boşanma davası ve arabuluculuk süreçleri',
      icon: '💔',
      color: '#3B82F6',
      gradient: 'from-blue-400 to-blue-600',
      duration: '6-12 ay',
      difficulty: 'Orta',
      total_steps: 6,
      has_calculator: false,
      calculator_type: '',
      category: 'hukuk',
      tags: ['boşanma', 'aile hukuku', 'arabuluculuk', 'mahkeme'],
      estimated_costs: {
        title: 'Boşanma Davası Tahmini Masrafları',
        items: [
          { name: 'Avukat Ücreti', min: 5000, max: 25000, note: 'Anlaşmalı daha ucuz, çekişmeli daha pahalı' },
          { name: 'Dava Harcı', min: 150, max: 500, note: 'Davaya konu mal varlığına göre değişir' },
          { name: 'Arabuluculuk Ücreti', min: 0, max: 2000, note: 'Zorunlu değil, ama önerilir' },
          { name: 'Noter Masrafları', min: 200, max: 1000, note: 'Anlaşma protokolü için' },
          { name: 'Keşif/Bilirkişi', min: 0, max: 5000, note: 'Mal paylaşımı varsa gerekebilir' },
          { name: 'Temyiz Masrafları', min: 0, max: 3000, note: 'Karara itiraz edilirse' }
        ],
        total_range: '5.350 - 36.500 TL',
        free_options: [
          'Adli yardımdan yararlanabilirsiniz (gelir şartı var)',
          'Anlaşmalı boşanmada tek avukat yeterli',
          'Bazı barolar ücretsiz danışmanlık verir'
        ]
      },
      steps: [
        {
          id: 'step1',
          title: 'Hukuki Danışmanlık',
          short_title: 'Danışmanlık',
          description: 'Bir avukatla görüşerek boşanma sürecinin detayları hakkında bilgi alın. Haklarınızı ve yükümlülüklerinizi öğrenin.',
          duration: '1-2 saat',
          participants: ['Avukat', 'Danışan'],
          required_documents: [
            {name: "Kimlik belgesi", description: "Nüfus cüzdanı veya T.C. kimlik kartı"},
            {name: "Evlilik cüzdanı", description: "Resmi nikah belgesi"},
            {name: "Gelir belgesi", description: "Maaş bordrosu veya gelir beyannamesi"}
          ],
          important_notes: ['Boşanma sebeplerini belirleyin', 'Mal paylaşımı konularını değerlendirin', 'Çocuk velayeti durumunu görüşün'],
          position: { x: 50, y: 50 },
          connections: ['step2'],
          status: 'active'
        },
        {
          id: 'step2',
          title: 'Arabuluculuk',
          short_title: 'Arabuluculuk',
          description: 'Mahkeme öncesi arabuluculuk sürecini deneyin. Arabulucu, tarafsız bir üçüncü kişi olarak anlaşmanızı sağlamaya çalışır.',
          duration: '2-4 hafta',
          participants: ['Arabulucu', 'Eşler', 'Avukatlar'],
          required_documents: [
            {name: "Arabuluculuk başvuru formu", description: "Resmi başvuru belgesi"},
            {name: "Kimlik belgesi", description: "Her iki eş için kimlik belgesi"},
            {name: "Evlilik cüzdanı", description: "Orijinal evlilik belgesi"}
          ],
          important_notes: ['Zorunlu değil ancak önerilir', 'Daha hızlı ve ekonomik çözüm', 'Gizlilik esasına dayanır'],
          position: { x: 250, y: 50 },
          connections: ['step3', 'step4'],
          status: 'upcoming'
        },
        {
          id: 'step3',
          title: 'Anlaşmalı Boşanma',
          short_title: 'Anlaşmalı',
          description: 'Tüm konularda anlaştıysanız, anlaşmalı boşanma davası açın. Tek avukat yeterlidir.',
          duration: '2-3 ay',
          participants: ['Avukat', 'Eşler', 'Hakim'],
          required_documents: [
            {name: "Dava dilekçesi", description: "Mahkemeye sunulan resmi başvuru belgesi"},
            {name: "Anlaşma protokolü", description: "Taraflar arasındaki anlaşma belgesi"},
            {name: "Mali durum belgeleri", description: "Gelir ve gider durumunu gösteren belgeler"}
          ],
          important_notes: ['Daha hızlı süreç', 'Tek avukat yeterli', 'Ekonomik çözüm'],
          position: { x: 150, y: 200 },
          connections: ['step6'],
          status: 'upcoming'
        }
      ]
    };
    
    setProcess(sampleProcess);
  };

  const loadWorkLawSample = () => {
    const workLawProcess = {
      title: 'İş Davası Süreci',
      description: 'İşçi hakları ve iş mahkemesi süreçleri',
      icon: '💼',
      color: '#F97316',
      gradient: 'from-orange-400 to-orange-600',
      duration: '6-12 ay',
      difficulty: 'Orta',
      total_steps: 5,
      has_calculator: true,
      calculator_type: 'compensation',
      category: 'hukuk',
      tags: ['işçi hakları', 'tazminat', 'iş kanunu', 'mahkeme'],
      estimated_costs: {
        title: 'İş Davası Tahmini Masrafları',
        items: [
          { name: 'Avukat Ücreti', min: 0, max: 10000, note: 'İş mahkemelerinde vekalet ücreti muafiyeti var' },
          { name: 'Dava Harcı', min: 0, max: 0, note: 'İş davalarında harç muafiyeti' },
          { name: 'Arabuluculuk', min: 0, max: 0, note: 'Zorunlu ve ücretsiz' },
          { name: 'İcra Masrafları', min: 50, max: 500, note: 'İcra takibinde masraflar' },
          { name: 'Ekspertiz Ücreti', min: 0, max: 2000, note: 'Bilirkişi gerekirse' },
          { name: 'Temyiz Masrafları', min: 0, max: 1000, note: 'Yargıtay başvurusu' }
        ],
        total_range: '50 - 13.500 TL',
        free_options: [
          'İş davalarında harç muafiyeti var',
          'Arabuluculuk zorunlu ve ücretsiz',
          'Bazı avukatlar başarı ücreti alır',
          'Adli yardımdan yararlanabilirsiniz'
        ]
      },
      steps: [
        {
          id: 'step1',
          title: 'İş Sona Erme',
          short_title: 'İşten Çıkış',
          description: 'İş sözleşmesinin sona ermesi ve alacakların hesaplanması',
          duration: '1 hafta',
          participants: ['İşçi', 'İşveren', 'İK Departmanı'],
          required_documents: [
            {name: "İş sözleşmesi", description: "Yazılı iş sözleşmesi belgesi"},
            {name: "Bordro örnekleri", description: "Son 12 ayın maaş bordroları"},
            {name: "İşten çıkış belgesi", description: "İşveren tarafından verilen resmi belge"}
          ],
          important_notes: ['Tüm belgelerinizi saklayın', 'Alacaklarınızı hesaplayın', 'Fesih gerekçesini öğrenin'],
          position: { x: 50, y: 50 },
          connections: ['step2'],
          status: 'active'
        },
        {
          id: 'step2',
          title: 'Arabuluculuk',
          short_title: 'Arabuluculuk',
          description: 'Zorunlu arabuluculuk süreci (6 hafta)',
          duration: '6 hafta',
          participants: ['Arabulucu', 'İşçi', 'İşveren'],
          required_documents: [
            {name: "Arabuluculuk başvuru formu", description: "Resmi başvuru belgesi"},
            {name: "Çalışma belgeleri", description: "İş sözleşmesi ve bordro örnekleri"},
            {name: "Alacak hesap cetveli", description: "Talep edilen tazminatların detaylı hesabı"}
          ],
          important_notes: ['Dava öncesi zorunludur', 'Ücretsiz hizmettir', 'Anlaşma olabilir'],
          position: { x: 250, y: 50 },
          connections: ['step3'],
          status: 'upcoming'
        }
      ]
    };
    
    setProcess(workLawProcess);
  };

  useEffect(() => {
    if (isEditing) {
      fetchProcess();
    }
  }, [id, isEditing]);

  const fetchProcess = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('admin_token');
      const response = await fetch(`${API_CONFIG.BACKEND_URL}/api/admin/legal-processes/${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        
        // Convert camelCase fields from backend to snake_case for internal use
        const normalizedData = {
          ...data,
          has_calculator: data.hasCalculator || data.has_calculator || false,
          calculator_type: data.calculatorType || data.calculator_type || '',
          total_steps: data.totalSteps || data.total_steps || 0,
          estimated_costs: data.estimatedCosts || data.estimated_costs || {
            title: '',
            items: [],
            total_range: '',
            free_options: []
          },
          required_documents: data.requiredDocuments || data.required_documents || [],
          important_notes: data.importantNotes || data.important_notes || []
        };
        
        setProcess(normalizedData);
      } else {
        console.error('Failed to fetch process');
        // Mock data fallback for development
        console.log('Using mock process data');
        setProcess({
          title: 'Örnek Hukuki Süreç',
          description: 'Bu bir örnek hukuki süreçtir',
          icon: '⚖️',
          color: '#3B82F6',
          gradient: 'from-blue-500 to-blue-600',
          duration: '3-6 ay',
          difficulty: 'Orta',
          total_steps: 0,
          has_calculator: false,
          calculator_type: '',
          category: 'hukuk',
          tags: ['örnek', 'hukuk'],
          estimated_costs: {
            title: 'Tahmini Masraflar',
            items: [],
            total_range: '1.000 - 5.000 TL',
            free_options: []
          },
          steps: []
        });
      }
    } catch (error) {
      console.error('Error fetching process:', error);
      // Mock data fallback for development
      console.log('Using mock process data');
      setProcess({
        title: 'Örnek Hukuki Süreç',
        description: 'Bu bir örnek hukuki süreçtir',
        icon: '⚖️',
        color: '#3B82F6',
        gradient: 'from-blue-500 to-blue-600',
        duration: '3-6 ay',
        difficulty: 'Orta',
        total_steps: 0,
        has_calculator: false,
        calculator_type: '',
        category: 'hukuk',
        tags: ['örnek', 'hukuk'],
        estimated_costs: {
          title: 'Tahmini Masraflar',
          items: [],
          total_range: '1.000 - 5.000 TL',
          free_options: []
        },
        steps: []
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    console.log('Save button clicked!');
    console.log('Process data:', process);
    
    try {
      setLoading(true);
      const token = localStorage.getItem('admin_token');
      console.log('Token:', token);
      
      const processData = {
        ...process,
        total_steps: (process?.steps || []).length,
        // Convert field names to match backend aliases
        hasCalculator: process.has_calculator,
        calculatorType: process.calculator_type,
        totalSteps: (process?.steps || []).length,
        estimatedCosts: process.estimated_costs,
        requiredDocuments: process.required_documents || [],
        importantNotes: process.important_notes || []
      };
      
      // Remove snake_case fields to avoid confusion
      delete processData.has_calculator;
      delete processData.calculator_type;
      delete processData.total_steps;
      delete processData.estimated_costs;
      delete processData.required_documents;
      delete processData.important_notes;

      console.log('Sending data:', processData);

      const backendUrl = API_CONFIG.BACKEND_URL;
      
      const url = isEditing 
        ? `${backendUrl}/api/admin/legal-processes/${id}`
        : `${backendUrl}/api/admin/legal-processes`;
      
      console.log('Backend URL:', backendUrl);
      console.log('API URL:', url);
      
      const method = isEditing ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(processData),
      });

      console.log('Response status:', response.status);
      console.log('Response ok:', response.ok);

      if (response.ok) {
        const result = await response.json();
        console.log('Save successful:', result);
        navigate('/admin/legal-processes');
      } else {
        const errorData = await response.text();
        console.error('Failed to save process:', errorData);
        alert('Kaydetme başarısız: ' + errorData);
      }
    } catch (error) {
      console.error('Error saving process:', error);
      
      // Mock data fallback for development
      console.log('Using mock save - process saved locally');
      alert('Süreç başarıyla kaydedildi! (Mock mode - backend bağlantısı yok)');
      navigate('/admin/legal-processes');
    } finally {
      setLoading(false);
    }
  };

  const addTag = () => {
    if (newTag && !process.tags.includes(newTag)) {
      setProcess({
        ...process,
        tags: [...process.tags, newTag]
      });
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove) => {
    setProcess({
      ...process,
      tags: process.tags.filter(tag => tag !== tagToRemove)
    });
  };

  const addCostItem = () => {
    if (newCostItem.name && newCostItem.min && newCostItem.max) {
      setProcess({
        ...process,
        estimated_costs: {
          ...process?.estimated_costs || {},
          items: [...(process?.estimated_costs?.items || []), {
            ...newCostItem,
            min: parseInt(newCostItem.min),
            max: parseInt(newCostItem.max)
          }]
        }
      });
      setNewCostItem({ name: '', min: '', max: '', note: '' });
    }
  };

  const removeCostItem = (index) => {
    const newItems = (process?.estimated_costs?.items || []).filter((_, i) => i !== index);
    setProcess({
      ...process,
      estimated_costs: {
        ...process?.estimated_costs || {},
        items: newItems
      }
    });
  };

  const addFreeOption = () => {
    if (newFreeOption && !(process?.estimated_costs?.freeOptions || process?.estimated_costs?.free_options || []).includes(newFreeOption)) {
      setProcess({
        ...process,
        estimated_costs: {
          ...process?.estimated_costs || {},
          free_options: [...(process?.estimated_costs?.freeOptions || process?.estimated_costs?.free_options || []), newFreeOption]
        }
      });
      setNewFreeOption('');
    }
  };

  const removeFreeOption = (optionToRemove) => {
    setProcess({
      ...process,
      estimated_costs: {
        ...process?.estimated_costs || {},
        free_options: (process?.estimated_costs?.freeOptions || process?.estimated_costs?.free_options || []).filter(option => option !== optionToRemove)
      }
    });
  };

  const addStep = () => {
    if (newStep.title && newStep.description) {
      const stepWithId = {
        ...newStep,
        id: `step${(process?.steps || []).length + 1}`,
        participants: newStep.participants || [],
        required_documents: newStep.required_documents || [],
        important_notes: newStep.important_notes || []
      };
      
      setProcess({
        ...process,
        steps: [...(process?.steps || []), stepWithId]
      });
      setNewStep({
        id: '',
        title: '',
        short_title: '',
        description: '',
        duration: '',
        participants: [],
        required_documents: [],
        important_notes: [],
        position: { x: 0, y: 0 },
        connections: [],
        status: 'upcoming'
      });
      // Reset step detail inputs
      setNewParticipant('');
      setNewDocument('');
      setNewDocumentDescription('');
      setNewImportantNote('');
    }
  };

  // Step detail management functions
  const addParticipantToStep = () => {
    if (newParticipant && !newStep.participants.includes(newParticipant)) {
      setNewStep({
        ...newStep,
        participants: [...newStep.participants, newParticipant]
      });
      setNewParticipant('');
    }
  };

  const removeParticipantFromStep = (participant) => {
    setNewStep({
      ...newStep,
      participants: newStep.participants.filter(p => p !== participant)
    });
  };

  const addDocumentToStep = () => {
    if (newDocument && !newStep.required_documents.find(d => d.name === newDocument)) {
      const documentWithDescription = {
        name: newDocument,
        description: newDocumentDescription || `${newDocument} hakkında detaylı bilgi`
      };
      
      setNewStep({
        ...newStep,
        required_documents: [...newStep.required_documents, documentWithDescription]
      });
      setNewDocument('');
      setNewDocumentDescription('');
    }
  };

  const removeDocumentFromStep = (documentName) => {
    setNewStep({
      ...newStep,
      required_documents: newStep.required_documents.filter(d => d.name !== documentName)
    });
  };

  const addImportantNoteToStep = () => {
    if (newImportantNote && !newStep.important_notes.includes(newImportantNote)) {
      setNewStep({
        ...newStep,
        important_notes: [...newStep.important_notes, newImportantNote]
      });
      setNewImportantNote('');
    }
  };

  const removeImportantNoteFromStep = (note) => {
    setNewStep({
      ...newStep,
      important_notes: newStep.important_notes.filter(n => n !== note)
    });
  };

  const [editingStep, setEditingStep] = useState(null);

  const editStep = (index) => {
    const step = process?.steps?.[index];
    if (step) {
      setNewStep({
        id: step.id,
        title: step.title,
        short_title: step.short_title || "",
        description: step.description,
        duration: step.duration || "",
        participants: step.participants || [],
        required_documents: step.required_documents || [],
        important_notes: step.important_notes || [],
        position: step.position || { x: 0, y: 0 },
        connections: step.connections || [],
        status: step.status || "upcoming"
      });
      setEditingStep(index);
    }
  };

const updateStep = () => {    if (editingStep !== null && newStep.title && newStep.description) {      const updatedSteps = [...(process?.steps || [])];      updatedSteps[editingStep] = {        ...updatedSteps[editingStep],        title: newStep.title,        short_title: newStep.short_title || "",        description: newStep.description,        duration: newStep.duration || "",        participants: newStep.participants || [],        required_documents: newStep.required_documents || [],        important_notes: newStep.important_notes || [],        position: newStep.position || { x: 0, y: 0 },        connections: newStep.connections || [],        status: newStep.status || "upcoming"      };            setProcess({        ...process,        steps: updatedSteps      });            setNewStep({        id: "",        title: "",        short_title: "",        description: "",        duration: "",        participants: [],        required_documents: [],        important_notes: [],        position: { x: 0, y: 0 },        connections: [],        status: "upcoming"      });      setEditingStep(null);      setNewParticipant("");      setNewDocument("");      setNewDocumentDescription("");      setNewImportantNote("");    }  }
  };

  const cancelEditStep = () => {
    setNewStep({
      id: "",
      title: "",
      short_title: "",
      description: "",
      duration: "",
      participants: [],
      required_documents: [],
      important_notes: [],
      position: { x: 0, y: 0 },
      connections: [],
      status: "upcoming"
    });
    setEditingStep(null);
    setNewParticipant("");
    setNewDocument("");
    setNewDocumentDescription("");
    setNewImportantNote("");
  };

  const removeStep = (index) => {
    const newSteps = (process?.steps || []).filter((_, i) => i !== index);
    setProcess({
      ...process,
      steps: newSteps
    });
  };

  // Loading screen for editing mode or when process data is not available
  if ((loading && isEditing) || (isEditing && !process.title)) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Hukuki süreç yükleniyor...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="outline"
            onClick={() => navigate('/admin/legal-processes')}
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Geri
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              {isEditing ? 'Hukuki Süreç Düzenle' : 'Yeni Hukuki Süreç Ekle'}
            </h1>
            <p className="text-gray-600">
              {isEditing ? 'Mevcut süreci güncelleyin' : 'Yeni bir hukuki süreç oluşturun'}
            </p>
          </div>
        </div>
        
        <div className="flex gap-2">
          <div className="relative">
            <Button
              variant="outline"
              onClick={loadSampleData}
              className="text-purple-600 border-purple-300 hover:bg-purple-50"
            >
              📋 Boşanma Örneği
            </Button>
          </div>
          <Button
            variant="outline"
            onClick={loadWorkLawSample}
            className="text-orange-600 border-orange-300 hover:bg-orange-50"
          >
            💼 İş Davası Örneği
          </Button>
          <Button
            variant="outline"
            onClick={() => navigate('/admin/legal-processes')}
          >
            <X className="h-4 w-4 mr-2" />
            İptal
          </Button>
          <Button
            onClick={handleSave}
            disabled={loading}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Kaydediliyor...
              </>
            ) : (
              <>
                <Save className="h-4 w-4 mr-2" />
                Kaydet
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Basic Information */}
      <Card>
        <CardHeader>
          <CardTitle>Temel Bilgiler</CardTitle>
          <CardDescription>Hukuki sürecin temel bilgilerini girin</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Süreç Başlığı *
              </label>
              <input
                type="text"
                value={process?.title || ''}
                onChange={(e) => setProcess({ ...process, title: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Örn: Boşanma Süreci"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Kategori *
              </label>
              <select
                value={process?.category || 'hukuk'}
                onChange={(e) => setProcess({ ...process, category: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="hukuk">Hukuk</option>
                <option value="ceza">Ceza</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                İkon
              </label>
              <input
                type="text"
                value={process?.icon || '⚖️'}
                onChange={(e) => setProcess({ ...process, icon: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="⚖️"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Renk
              </label>
              <input
                type="color"
                value={process?.color || '#3B82F6'}
                onChange={(e) => setProcess({ ...process, color: e.target.value })}
                className="w-full h-10 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Süre
              </label>
              <input
                type="text"
                value={process?.duration || ''}
                onChange={(e) => setProcess({ ...process, duration: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Örn: 6-12 ay"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Zorluk Derecesi
              </label>
              <select
                value={process?.difficulty || 'Orta'}
                onChange={(e) => setProcess({ ...process, difficulty: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="Kolay">Kolay</option>
                <option value="Orta">Orta</option>
                <option value="Zor">Zor</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Açıklama *
            </label>
            <textarea
              value={process?.description || ''}
              onChange={(e) => setProcess({ ...process, description: e.target.value })}
              rows={3}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Hukuki sürecin detaylı açıklaması..."
            />
          </div>

          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="has_calculator"
              checked={process?.has_calculator || false}
              onChange={(e) => setProcess({ 
                ...process, 
                has_calculator: e.target.checked,
                calculator_type: e.target.checked ? (process?.calculator_type || '') : ''
              })}
              className="rounded border-gray-300 focus:ring-blue-500"
            />
            <label htmlFor="has_calculator" className="text-sm text-gray-700">
              Bu süreç için hesaplayıcı var
            </label>
          </div>

          {process.has_calculator && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Hesaplayıcı Türü *
              </label>
              <select
                value={process.calculator_type}
                onChange={(e) => setProcess({ ...process, calculator_type: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required={process.has_calculator}
              >
                <option value="">Hesaplayıcı seçin...</option>
                <option value="compensation">Tazminat Hesaplayıcı</option>
                <option value="execution">İnfaz Hesaplayıcı</option>
              </select>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Tags */}
      <Card>
        <CardHeader>
          <CardTitle>Etiketler</CardTitle>
          <CardDescription>Süreç için arama etiketleri ekleyin</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-2 mb-4">
            {process.tags.map((tag, index) => (
              <Badge
                key={index}
                variant="outline"
                className="flex items-center gap-1"
              >
                {tag}
                <X
                  className="h-3 w-3 cursor-pointer"
                  onClick={() => removeTag(tag)}
                />
              </Badge>
            ))}
          </div>
          
          <div className="flex gap-2">
            <input
              type="text"
              value={newTag}
              onChange={(e) => setNewTag(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && addTag()}
              className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Yeni etiket..."
            />
            <Button onClick={addTag} variant="outline">
              <Plus className="h-4 w-4" />
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Cost Estimation */}
      <Card>
        <CardHeader>
          <CardTitle>Maliyet Tahmini</CardTitle>
          <CardDescription>Süreç için tahmini maliyetleri ekleyin</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Maliyet Başlığı
            </label>
            <input
              type="text"
              value={process?.estimated_costs?.title || ''}
              onChange={(e) => setProcess({
                ...process,
                estimated_costs: { ...process.estimated_costs, title: e.target.value }
              })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Örn: Boşanma Davası Tahmini Masrafları"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Toplam Aralık
            </label>
            <input
              type="text"
              value={process?.estimated_costs?.totalRange || process?.estimated_costs?.total_range || ''}
              onChange={(e) => setProcess({
                ...process,
                estimated_costs: { ...process.estimated_costs, total_range: e.target.value }
              })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Örn: 5.000 - 25.000 TL"
            />
          </div>

          {/* Cost Items */}
          <div>
            <h4 className="font-medium text-gray-900 mb-2">Maliyet Kalemleri</h4>
            <div className="space-y-2 mb-4">
              {(process?.estimated_costs?.items || []).map((item, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                  <div className="flex-1">
                    <div className="font-medium">{item.name}</div>
                    <div className="text-sm text-gray-600">
                      {item.min.toLocaleString()} - {item.max.toLocaleString()} TL
                    </div>
                    {item.note && <div className="text-xs text-gray-500">{item.note}</div>}
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => removeCostItem(index)}
                    className="text-red-600 border-red-300 hover:bg-red-50"
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              ))}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-2">
              <input
                type="text"
                value={newCostItem.name}
                onChange={(e) => setNewCostItem({ ...newCostItem, name: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Kalem adı"
              />
              <input
                type="number"
                value={newCostItem.min}
                onChange={(e) => setNewCostItem({ ...newCostItem, min: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Min tutar"
              />
              <input
                type="number"
                value={newCostItem.max}
                onChange={(e) => setNewCostItem({ ...newCostItem, max: e.target.value })}
                className="px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Max tutar"
              />
              <div className="flex gap-2">
                <input
                  type="text"
                  value={newCostItem.note}
                  onChange={(e) => setNewCostItem({ ...newCostItem, note: e.target.value })}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Not"
                />
                <Button onClick={addCostItem} variant="outline">
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>

          {/* Free Options */}
          <div>
            <h4 className="font-medium text-gray-900 mb-2">Ücretsiz Seçenekler</h4>
            <div className="flex flex-wrap gap-2 mb-4">
              {(process?.estimated_costs?.freeOptions || process?.estimated_costs?.free_options || []).map((option, index) => (
                <Badge
                  key={index}
                  variant="outline"
                  className="flex items-center gap-1 bg-green-50 text-green-700"
                >
                  {option}
                  <X
                    className="h-3 w-3 cursor-pointer"
                    onClick={() => removeFreeOption(option)}
                  />
                </Badge>
              ))}
            </div>
            
            <div className="flex gap-2">
              <input
                type="text"
                value={newFreeOption}
                onChange={(e) => setNewFreeOption(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addFreeOption()}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Ücretsiz seçenek..."
              />
              <Button onClick={addFreeOption} variant="outline">
                <Plus className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Process Steps - Full Featured */}
      <Card>
        <CardHeader>
          <CardTitle>Süreç Adımları</CardTitle>
          <CardDescription>Hukuki sürecin detaylı adımlarını tanımlayın</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {(process?.steps || []).map((step, index) => (
              <div key={index} className="p-4 border border-gray-200 rounded-md bg-gray-50">
                <div className="flex items-center justify-between mb-3">
                  <div className="font-medium text-lg">{step.title}</div>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => editStep(index)}
                      className="text-blue-600 border-blue-300 hover:bg-blue-50"
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => removeStep(index)}
                      className="text-red-600 border-red-300 hover:bg-red-50"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                  <div>
                    <span className="text-sm font-medium text-gray-700">Kısa Başlık:</span>
                    <div className="text-sm text-gray-600">{step.short_title || 'Belirtilmemiş'}</div>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-700">Süre:</span>
                    <div className="text-sm text-gray-600">{step.duration || 'Belirtilmemiş'}</div>
                  </div>
                </div>
                
                <div className="mb-3">
                  <span className="text-sm font-medium text-gray-700">Açıklama:</span>
                  <div className="text-sm text-gray-600 mt-1">{step.description}</div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <span className="text-sm font-medium text-gray-700">Katılımcılar:</span>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {step.participants?.length > 0 ? (
                        step.participants.map((participant, i) => (
                          <Badge key={i} variant="outline" className="text-xs bg-blue-50">
                            {participant}
                          </Badge>
                        ))
                      ) : (
                        <span className="text-xs text-gray-400">Belirtilmemiş</span>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <span className="text-sm font-medium text-gray-700">Gerekli Belgeler:</span>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {step.required_documents?.length > 0 ? (
                        step.required_documents.map((doc, i) => (
                          <Badge key={i} variant="outline" className="text-xs bg-yellow-50">
                            {typeof doc === 'string' ? doc : doc.name || "Belge adı belirtilmemiş"}
                          </Badge>
                        ))
                      ) : (
                        <span className="text-xs text-gray-400">Belirtilmemiş</span>
                      )}
                    </div>
                  </div>
                  
                  <div>
                    <span className="text-sm font-medium text-gray-700">Önemli Notlar:</span>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {step.important_notes?.length > 0 ? (
                        step.important_notes.map((note, i) => (
                          <Badge key={i} variant="outline" className="text-xs bg-red-50">
                            {typeof note === 'string' ? note : note.text || "Not belirtilmemiş"}
                          </Badge>
                        ))
                      ) : (
                        <span className="text-xs text-gray-400">Belirtilmemiş</span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Add New Step Form */}
          <div className="mt-6 p-4 border-2 border-dashed border-gray-300 rounded-md">
            <h4 className="font-medium text-gray-900 mb-4">Yeni Adım Ekle</h4>
            
            <div className="space-y-4">
              {/* Basic Step Info */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Adım Başlığı *
                  </label>
                  <input
                    type="text"
                    value={newStep.title}
                    onChange={(e) => setNewStep({ ...newStep, title: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Örn: Hukuki Danışmanlık"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Kısa Başlık
                  </label>
                  <input
                    type="text"
                    value={newStep.short_title}
                    onChange={(e) => setNewStep({ ...newStep, short_title: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Örn: Danışmanlık"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Süre
                  </label>
                  <input
                    type="text"
                    value={newStep.duration}
                    onChange={(e) => setNewStep({ ...newStep, duration: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Örn: 1-2 saat"
                  />
                </div>
              </div>

              {/* Step Description */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Adım Açıklaması *
                </label>
                <textarea
                  value={newStep.description}
                  onChange={(e) => setNewStep({ ...newStep, description: e.target.value })}
                  rows={2}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Bu adımda neler yapılacağını detaylı açıklayın..."
                />
              </div>

              {/* Participants */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Katılımcılar
                </label>
                <div className="flex flex-wrap gap-2 mb-2">
                  {newStep.participants.map((participant, index) => (
                    <Badge
                      key={index}
                      variant="outline"
                      className="flex items-center gap-1 bg-blue-50"
                    >
                      {participant}
                      <X
                        className="h-3 w-3 cursor-pointer"
                        onClick={() => removeParticipantFromStep(participant)}
                      />
                    </Badge>
                  ))}
                </div>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newParticipant}
                    onChange={(e) => setNewParticipant(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && addParticipantToStep()}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Örn: Avukat, Danışan, Hakim..."
                  />
                  <Button onClick={addParticipantToStep} variant="outline" size="sm">
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </div>

              {/* Required Documents */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Gerekli Belgeler
                </label>
                <div className="flex flex-wrap gap-2 mb-2">
                  {newStep.required_documents.map((document, index) => (
                    <div key={index} className="group relative">
                      <Badge
                        variant="outline"
                        className="flex items-center gap-1 bg-yellow-50 cursor-help"
                        title={document.description || document.name}
                      >
                        {document.name || document}
                        <X
                          className="h-3 w-3 cursor-pointer"
                          onClick={() => removeDocumentFromStep(document.name || document)}
                        />
                      </Badge>
                      {(document.description) && (
                        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10">
                          {document.description}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
                <div className="space-y-2">
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={newDocument}
                      onChange={(e) => setNewDocument(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && addDocumentToStep()}
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Örn: Kimlik belgesi"
                    />
                    <Button onClick={addDocumentToStep} variant="outline" size="sm">
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                  <input
                    type="text"
                    value={newDocumentDescription}
                    onChange={(e) => setNewDocumentDescription(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                    placeholder="Belge açıklaması (hover'da görünecek)"
                  />
                </div>
              </div>

              {/* Important Notes */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Önemli Notlar
                </label>
                <div className="flex flex-wrap gap-2 mb-2">
                  {newStep.important_notes.map((note, index) => (
                    <Badge
                      key={index}
                      variant="outline"
                      className="flex items-center gap-1 bg-red-50"
                    >
                      {note}
                      <X
                        className="h-3 w-3 cursor-pointer"
                        onClick={() => removeImportantNoteFromStep(note)}
                      />
                    </Badge>
                  ))}
                </div>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newImportantNote}
                    onChange={(e) => setNewImportantNote(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && addImportantNoteToStep()}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Örn: Zorunlu değil ancak önerilir..."
                  />
                  <Button onClick={addImportantNoteToStep} variant="outline" size="sm">
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </div>

              <Button onClick={editingStep !== null ? updateStep : addStep} variant="outline" className="w-full mt-4">
                {editingStep !== null ? <Save className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                {editingStep !== null ? " Adımı Güncelle" : " Adım Ekle"}
              </Button>
              {editingStep !== null && (
                <Button onClick={cancelEditStep} variant="outline" className="w-full mt-2 text-gray-600">
                  <X className="h-4 w-4" />
                  İptal
                </Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default LegalProcessForm;